#import "theme://include/buttons.view"
#import "theme://include/separators.view"
#import "theme://include/slider.view"

$view.showFilter = $page.model.filter && 1;

widget(container_y, {
  widget(container_x, {

    widget(dummy, { .width = 2; });

    widget(keyintercept, {
      bind($page.model.filter);
      .enabled = $page.model.canFilter;
      
      widget(container_y, {
	.filterConstraintX = true;
	
	widget(expander_y, {
	  .filterConstraintX = true;

	  .expansion = scurve($view.showFilter, 0.25);
	  .alpha     = scurve($view.showFilter, 0.25);
	  
	  widget(container_x, {
	    widget(backdrop, {
	      .filterConstraintX = true;
	      .color = [0.3, 0.3, 0.3];
	      PLATE_GFX();
	      widget(container_x, {
		
		widget(label, {
		  .caption = "Filter: ";
		});
		
		widget(label, {
		  .caption = $page.model.filter;
		});
      	      });
	    });
	    ICON2("theme://svg/Delete.svg",
		  "Clear",
		  {
		    $page.model.filter = void;
		  },
		  PLATE_COLOR_DELETE(),
		  1, 0.1);
	  });
	});


	
	widget(array, {
	  $view.sizer = int(getWidth() / 100);

	  .id = "array";
	  .border = $view.sizer * 3;
	  .Xspacing = $view.sizer * 3;
	  .Yspacing = $view.sizer * 3;
	  .childTilesX = 6;
	  .childTilesY = 3;
	  
	  cloner($page.model.nodes, displacement, {
	    .focusable = true;
	    .focusOnClick = true;
	    .padding = $view.sizer * -1.5 * iir(isHovered() || isFocused(), 3) + $view.sizer * iir(isPressed(), 3);

	    onEvent(activate, select($ui.fancyAnimations,
				     navOpen($self.url, void, $self, $parent.model),
				     navOpen($self.url, void, void, $parent.model)));
	    widget(container_y, {
	      .spacing = 5;
	      widget(detachable, {
		widget(container_z, {
		  widget(backdrop, {
		    .source = "theme://graphics/boxbg.png";
		    .border = 12;
		    .padding = -4;
		    .color = 0.3 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
		    
		    widget(loader, {
		      .time = 0.3;
		      .noInitialTransform = true;
		      .source = "theme://directoryviews/array/" +
			translate($self.type, "default",
				  "album", "album",
				  "directory", "directory",
				  "plugin", "plugin") + ".view";
		    });
		  });
		  widget(backdrop, {
		    .source = "theme://graphics/boxgloss.png";
		    .border = 12;
		    .alpha = iir(0.2 + isHovered() * 0.2 + isFocused() * 0.2 + isPressed() * 0.2 , 5);
		    .additive = true;
		  });
		});
	      });
	      widget(label, {
		.color = 0.3 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
		.caption = $self.metadata.title;
		.align = center;
		.ellipsize = true;
		.shadow = true;
	      });
	    });
	  });
	});	  
      });
    });

    widget(dummy, { .width = 2; });
    LIST_Y_SLIDER("array");
    widget(dummy, { .width = 2; });
  });
  widget(dummy, {
    .height = $ui.playdeckheight;
  });

});