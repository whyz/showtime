#import "theme://include/separators.view"
#import "theme://include/defs.view"

$self.directClose = 1;

// If playstatus is set to stop, close the page
$self.close = $self.media.playstatus == "stop";

$view.statsAlpha = iir($self.media.stats, 8);

widget(container_z, {
  widget(video, {
    .model = $self.openedFrom;
    .primary = true;
    .source = $self.source;
  });


  widget(container_y, {

    // Only display error if there is an error and we are not primary.
    // If we are primary the playdeck will take care of that.
    .hidden = select($self.media.error && !$self.media.primary, false, true);

    space(1);
    
    widget(label, {
      .align = center;
      .sizeScale = 1.5;
      .caption = $self.url;
      .ellipsize = true;
    });

    space(0.1);

    widget(label, {
      .align = center;
      .caption = _("Unable to start video playback");
    });
    
    
    space(0.1);
    
    widget(label, {
      .align = center;
      .caption = $self.media.error;
    });
    
    space(1);
  });
  
  widget(container_y, {
    .padding = 5;
    widget(container_x, {
      widget(backdrop, {
        .source = "theme://graphics/blackdrop.png";
        .border = [12,12,12,12];
	.alphaSelf = $view.statsAlpha * 0.66;
	
	widget(container_y, {
	  .alpha = $view.statsAlpha;
	  
	  widget(label, {
	    .caption = _("Playback status");
	    .align = center;
	  });

	  HORIZONTAL_SEPARATOR();
	  
	  widget(container_x, {

	    widget(container_y, {
	      widget(label, {
		.align = right;
		.caption = "Source:";
	      });
	      
	      widget(label, {
		.align = right;
		.caption = "Video codec:";
	      });
	      
	      widget(label, {
		.align = right;
		.caption = "Video bitrate:";
	      });

	      widget(label, {
		.align = right;
		.caption = "Audio codec:";
	      });
	      
	      widget(label, {
		.align = right;
		.caption = "Video decode time:";
	      });
	      
	      widget(label, {
		.align = right;
		.caption = "A/V diff:";
	      });

	      widget(label, {
		.hidden = !$self.media.isRemote;
		.align = right;
		.caption = "Remote queue len:";
	      });

	      widget(label, {
		.hidden = !$self.media.isRemote;
		.align = right;
		.caption = "Remote queue drops:";
	      });

	      widget(label, {
		.align = right;
		.caption = "Packet buffer:";
	      });

	      widget(label, {
		.align = right;
		.caption = "Video queue len:";
	      });

	      widget(label, {
		.align = right;
		.caption = "Audio queue len:";
	      });

	      widget(label, {
		.hidden = !$self.media.io.cacheSizeValid;
		.align = right;
		.caption = "Read-ahead cache:";
	      });
	    });

	    widget(dummy, {
	      .width = 10;
	    });

	    widget(container_y, {
	      widget(label, {
		.caption = $self.media.metadata.format;
	      });
	      
	      widget(label, {
		.caption = $self.media.video.codec;
	      });
	      
	      widget(label, {
		.caption = fmt("%d kb/s", $self.media.video.bitrate);
	      });

	      widget(label, {
		.caption = $self.media.audio.codec;
	      });
	      
	      widget(label, {
		.caption = fmt("%d ms", $self.media.video.decodetime_avg);
	      });
	      
	      widget(label, {
		.caption = fmt("%d ms", $self.media.avdiff * 1000);
	      });

	      widget(label, {
		.hidden = !$self.media.isRemote;
		.caption = $self.media.remote.qlen;
	      });

	      widget(label, {
		.hidden = !$self.media.isRemote;
		.caption = $self.media.remote.drops;
	      });

	      widget(bar, {
		.height = $ui.size;
		.color1 = [1,1,1];
		.color2 = [1,1,1];
		.fill = $self.media.buffer.current / $self.media.buffer.limit;
	      });

	      widget(label, {
		.caption = $self.media.video.dqlen;
	      });

	      widget(label, {
		.caption = $self.media.audio.dqlen;
	      });
	      

	      widget(bar, {
		.hidden = !$self.media.io.cacheSizeValid;
		.height = $ui.size;
		.color1 = [1,1,1];
		.color2 = [1,1,1];
		.fill = $self.media.io.cacheSizeCurrent /
		  $self.media.io.cacheSizeMax;
	      });
	    });
	  });
	});
      });
    });
  });
});
