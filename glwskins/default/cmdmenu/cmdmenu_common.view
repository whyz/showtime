#import "skin://common.view"

#define CommandMenuCommon() {
  SEP(_("Navigation"));

  ITEM(_("Playqueue"), {
    $clone.pageMenu = false;
    fireEvent(navOpen("playqueue:"));
  });

  ITEM(_("Go to Home screen"), {
    $clone.pageMenu = false;
    fireEvent(navOpen("page:home"));
  });

  ITEM(_("Open Settings"), {
    $clone.pageMenu = false;
    fireEvent(navOpen("settings:"));
  });
  
  ITEM(_("Reload current page"), {
    $clone.pageMenu = false;
    fireEvent(event(ReloadData));
  });

  ITEM(select($ui.sysinfo, _("Hide system info"), _("Show system info")), {
    $ui.sysinfo = !$ui.sysinfo;
  });

  SEP(_("System"));

  ITEM(_("Exit Showtime"), event(Quit),
       "dataroot://resources/svg/Exit.svg", $global.runcontrol.canExit);

  ITEM(_("Suspend"), event(Standby),
       "dataroot://resources/svg/Power.svg", $global.runcontrol.canStandby);

  ITEMSLIDER(_("Time until sleep"),
             0,
             $global.runcontrol.sleepTimeMax,
             $global.runcontrol.sleepTimeStep,
             $global.runcontrol.sleepTime, _("min"),
             $global.runcontrol.sleepTimer);



  ITEM(select($global.runcontrol.sleepTimer,
              _("Disable sleep timer"),
              _("Activate sleep timer")), {
    $global.runcontrol.sleepTimer = !$global.runcontrol.sleepTimer;
  }, "dataroot://resources/svg/Power.svg", $global.runcontrol.canStandby);

  ITEM(_("Power off"), event(PowerOff),
       "dataroot://resources/svg/Power.svg", $global.runcontrol.canPowerOff);

}

#define BUTTON(ICON, EVENT, ENABLED, WEIGHT = 0.5) {
  
  widget(icon, {
    focusable: true;
    color: [0.431, 0.811, 1] + iir((isFocused() || isPressed() || isHovered()), 4);
    source: "dataroot://resources/svg/" + ICON + ".svg";
    shadow: true;
    sizeScale: 1.5;
  });
}

#define SEP(CAPTION) {
  widget(label, {
    padding: [0,$ui.size,0,0];
    TextStyleItem();
    sizeScale: 1.5;
    caption: CAPTION;
    color: [0.431, 0.811, 1];
    ellipsize: true;
  });
  VerticalSeparator();
}

#define SEPICON(CAPTION, ICON) {
  widget(container_x, {
    padding: [0,$ui.size,0,0];
    spacing: $ui.size / 3;
    widget(icon, {
      sizeScale: 1.5;
      color: [0.431, 0.811, 1];
      source: ICON;      
    });


    widget(label, {
      TextStyleItem();
      sizeScale: 1.5;
      caption: CAPTION;
      color: [0.431, 0.811, 1];
      ellipsize: true;
    });
  });
  VerticalSeparator();
}


#define ITEM(CAPTION, EVENT, ICON=void, ENABLED=true, ICONCOLOR=1) {
  widget(backdrop, {
    hidden: !(ENABLED);
    source: "skin://pages/listitems/highlight.png";
    alphaSelf: iir(isFocused() * 1, 8) + isHovered() * 0.1;
    focusable: true;
    onEvent(activate, EVENT);
    widget(container_x, {
      ListItemOpts();

      widget(icon, {
	source: ICON;
	color: ICONCOLOR * select(isFocused(), 1.0, 0.6);
      });

      widget(label, {
	TextStyleItem();
	caption: CAPTION;
	ellipsize: true;
	color: select(isFocused(), 1.0, 0.6);
      });
    });
  });
}



#define ITEMTOGGLE(CAPTION1, CAPTION2, STATE, EVENT, ENABLED,
		   ICON1=void, ICON2=void, ICONCOLOR=1) {
  widget(backdrop, {
    hidden: !(ENABLED);
    source: "skin://pages/listitems/highlight.png";
    alphaSelf: iir(isFocused() * 1, 8) + isHovered() * 0.1;
    focusable: true;
    onEvent(activate, EVENT);
    widget(container_x, {
      ListItemOpts();

      widget(icon, {
	source: select(STATE, ICON1, ICON2);
	color: ICONCOLOR * select(isFocused(), 1.0, 0.6);
      });

      widget(label, {
	TextStyleItem();
	caption: select(STATE, CAPTION2, CAPTION1);
	ellipsize: true;
	color: select(isFocused(), 1.0, 0.6);
      });
    });
  });
}



#define ITEMTOGGLE2(CAPTION, STATE, ENABLED) {
  widget(backdrop, {
    hidden: !ENABLED;
    source: "skin://pages/listitems/highlight.png";
    alphaSelf: iir(isFocused() * 1, 8) + isHovered() * 0.1;
    widget(container_x, {
      ListItemOpts();
      widget(dummy, {width: $ui.size;});
      widget(label, {
	TextStyleItem();
	caption: CAPTION;
	ellipsize: true;
	color: select(isFocused(), 1.0, 0.6) * 
	  select(STATE, [0.8, 1, 0.8], [1,0.8,0.8]);
	focusable: true;
	onEvent(activate, { (STATE) = !STATE; });
      });
      space(1);
      widget(icon, {
	align: right;
	source: "skin://pages/listitems/" + select(STATE, "options-on.png", "options-off.png");
      });
    });
  });
}


#define ITEMSLIDER(CAPTION, MIN, MAX, STEP, VALUE, UNIT, ENABLED) {
widget(backdrop, {
  source: "skin://pages/listitems/highlight.png";
  hidden: !(ENABLED);
  alphaSelf: iir(isFocused() * 1, 8) + isHovered() * 0.1;

  widget(container_x, {
    spacing: 13;
    widget(dummy, { width: $ui.size;});

    widget(label, {
      shadow: true;
      outline: true;
      color: select(isFocused(), 1.0, 0.6);
      caption: CAPTION;
      ellipsize: true;
    });

    widget(slider_x, {
      focusable: true;
      min: MIN;
      max: MAX;
      step: STEP;
      bind(VALUE);
      widget(backdrop, {
	source: "skin://graphics/plate8.png";
	margin: 3;
	border: 4;
	padding: -4;
	alphaSelf: 0.3;
	color: 0;
	widget(backdrop, {
	  source: "skin://graphics/border-tiny.png";
	  border: 4;
	  padding: [8, -4];
	  alphaSelf: 0.5;
	  borderOnly: true;
	  widget(label, {
	    padding: [0,0];
	    sizeScale: 0.8;
	    align: center;
	    caption: fmt("%d %s", VALUE, UNIT);
	    shadow: true;
	    outline: true;
	  });
	});
      });
    });
  });
});
}


#define commandMenuChrome(BODY) {

  widget(container_y, {
    padding: [$ui.width / 6, $ui.height / 8];
    widget(container_z, {
      filterConstraintY: true;
      widget(backdrop, {
	source: "skin://graphics/popupmenu.png";
	border: 56;
	borderOnly: true;
      });
      
      widget(backdrop, {
	alphaSelf: 0.85;
	source: "skin://graphics/popupmenu2.png";
	border: 56;
	padding: [0, -8];
	color: 0;
	
	  
	widget(container_x, {
	  filterConstraintX: true;
	  
	  widget(list_y, {

	    id: "list";
	    spacing: 3;
	    BODY;
	  });
	  
	  widget(slider_y, {
	    bind("list");
	    width: 4;
	    focusable: canScroll();
	    navFocusable: true;
	    alpha: iir(canScroll(), 16);
	    
	    widget(quad, {
	      alpha: iir(0.3 + 0.3 * (isFocused() || isPressed()), 4) + isHovered();
	    });
	  });
	});
      });
    });
  });
}



#define commandMenuChromeWide(BODY) {

  widget(container_y, {
    padding: [0, $ui.height / 8];
    widget(container_z, {
      filterConstraintY: true;
      widget(backdrop, {
	source: "skin://graphics/popupmenu.png";
	border: 56;
	borderOnly: true;
      });
      
      widget(backdrop, {
	alphaSelf: 0.85;
	source: "skin://graphics/popupmenu2.png";
	border: 56;
	padding: [0, -8];
	color: 0;
	
	  
	widget(container_x, {
	  filterConstraintX: true;
	  
	  widget(list_y, {
	    id: "list";
	    spacing: 3;
	    BODY;
	  });
	  
	  widget(slider_y, {
	    bind("list");
	    width: 4;
	    focusable: canScroll();
	    navFocusable: true;
	    alpha: iir(canScroll(), 16);
	    
	    widget(quad, {
	      alpha: iir(0.3 + 0.3 * (isFocused() || isPressed()), 4) + isHovered();
	    });
	  });
	});
      });
    });
  });
}


#define commandMenuChromeUltraWide(BODY) {

  widget(container_y, {
    space(1);
    widget(container_z, {
      height: $ui.size * 10 + 56*2;
      widget(backdrop, {
	source: "skin://graphics/popupmenu.png";
	border: 56;
	borderOnly: true;
	leftBorder: false;
	rightBorder: false;
      });
      
      widget(backdrop, {
	alphaSelf: 0.85;
	source: "skin://graphics/popupmenu2.png";
	border: 56;
	padding: [-56, -8];
	color: 0;
	leftBorder: false;
	rightBorder: false;

	BODY;
      });
    });
    space(1);
  });
}


